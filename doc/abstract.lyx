#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass paper
\use_default_options true
\language english
\inputencoding auto
\font_roman times
\font_sans avant
\font_typewriter default
\font_default_family rmdefault
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement p
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_author "Nikhil Marathe"
\pdf_keywords "techfest, opensoftware"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 2
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref section
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth -1
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
AppName
\end_layout

\begin_layout SubTitle
Open Software, Techfest 2010
\begin_inset Newline newline
\end_inset

Team: OS1347
\end_layout

\begin_layout Author
Nikhil Marathe
\begin_inset Newline newline
\end_inset


\family typewriter
\shape up
\size footnotesize
nsm.nikhil@gmail.com
\end_layout

\begin_layout Institution
DA-IICT, Gandhinagar,
\begin_inset Newline newline
\end_inset

Gujarat, India
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
AppName is a 
\emph on
music streaming server
\emph default
.
\end_layout

\begin_layout Standard
It allows users on a network to listen to tracks from a common source, to
 browse the collection and create playlists.
 It features simple installation and configuration.
 It can be used within internal networks or over the Internet.
 Since it uses the SHOUTcast protocol, it is supported by virtually all
 popular players on all platforms.
\end_layout

\begin_layout Section
About AppName
\end_layout

\begin_layout Standard
This section discusses the architecture and implementation of AppName.
 The principal problems AppName tries to solve are:
\end_layout

\begin_layout Itemize
Unnecessary separation of Server and Source
\end_layout

\begin_layout Itemize
Complicated configuration procedures
\end_layout

\begin_layout Standard
I believe that the Architecture provides a reasonable picture of how this
 is achieved considering the length limit on this abstract.
\end_layout

\begin_layout Subsection
Architecture of AppNames
\end_layout

\begin_layout Subsubsection
Underlying Technologies
\end_layout

\begin_layout Standard
According to me AppName is distinctive because of the choice of technologies
 it uses.
 While most of today's servers ( of any kind ) use languages like C or C++,
 AppName uses JavaScript!
\end_layout

\begin_layout Standard
The node
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
evented I/O for V8 JavaScript, 
\begin_inset CommandInset href
LatexCommand href
target "http://nodejs.org/"

\end_inset


\end_layout

\end_inset

 project by Ryan Dahl, allows execution of the language outside of the browser.
 In addition, rather than use multiple threads -- one per request -- the
 evented I/O model
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Whenever a potentially slow ( in terms of processor cycles ) task has to
 performed, it is delegated, a callback is attached and the processor is
 kept busy with other tasks while the I/O bound process waits for completion.
 On completion the callback is invoked and that task can resume.
\end_layout

\end_inset

 is used, wherein a central event loop drives the entire system.
\end_layout

\begin_layout Standard
This fits in perfectly with JavaScript's event based execution model.
 At the same time it prevents performance issues caused by multiple threads
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The C10K problem, 
\begin_inset CommandInset href
LatexCommand href
target "http://www.kegel.com/c10k.html"

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The V8 engine used by node is well known for its speed, achieveing performance
 by compiling JavaScript to native code.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://code.google.com/apis/v8/design.html"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Similarly, for the database -- rather than go with a Relational database,
 the Redis
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://code.google.com/p/redis/"

\end_inset


\end_layout

\end_inset

 key-value store
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Redis holds the entire DB in memory, except for occasional disk writes.
 Since no data stored in AppName is critical, we can afford the extremely
 small chance of the machine going down between writes.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Taking advantage of asynchronous I/O, here is a high-level view of the AppName
 stack.
\end_layout

\begin_layout Subsubsection
Protocol
\end_layout

\begin_layout Standard
The user interaction is done via normal HTTP with sessions used to store
 some data.
 For now, playlists are permanent and public, but in the future support
 may be added to have them expire after some time or be private
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Commercial-applications"

\end_inset

.
 The SHOUTcast protocol
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://forums.radiotoolbox.com/viewtopic.php?t=74"

\end_inset


\end_layout

\end_inset

, used by Nullsoft, is the de-facto standard for HTTP live-streaming and
 is supported by almost all players.
 So AppName implements it.
 The protocol is shown in the Figures
\begin_inset CommandInset ref
LatexCommand eqref
reference "fig:Request-response-architecture"

\end_inset


\end_layout

\begin_layout Subsubsection
Web Interface
\end_layout

\begin_layout Standard
The web interface follows a general Model-View-Controller pattern.
 nerve provides the routing, with JavaScript functions acting as controllers.
 A custom view mechanism, which uses the templating engine from underscore.js
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://documentcloud.github.com/underscore/"

\end_inset


\end_layout

\end_inset

 renders the actual HTML.
 The model is just a thin wrapper over Redis to perform various tasks outlined
 in Collection
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Collection"

\end_inset

Using the keys directly, tracks can be listed by Artist or Album.
 The first time a user clicks 
\begin_inset Quotes eld
\end_inset

Add to Playlist
\begin_inset Quotes erd
\end_inset

 a session is created and song ids are inserted into it as required.
 Once the user is done, he can download the generated .pls file and load
 it into his/her player.
\end_layout

\begin_layout Subsubsection
Collection
\begin_inset CommandInset label
LatexCommand label
name "sub:Collection"

\end_inset


\end_layout

\begin_layout Standard
The collection is configured simply by setting a top-level root directory.
 SHA1 hashes are used for uniqueness wherever required.
 There is a compromise between space and indexing of meta-data.
 If space is not a constraint, each song could be indexed by all tags like
 genre, year, and so on ( currently only on artist and album ).
\end_layout

\begin_layout Section
Commercial applications
\begin_inset CommandInset label
LatexCommand label
name "sec:Commercial-applications"

\end_inset


\end_layout

\begin_layout Standard
AppName is released under a liberal MIT license though, and so it is possible
 to use in a closed environment.
\end_layout

\begin_layout Standard
In terms of marketability, no one would want to really 
\emph on
purchase
\emph default
 the product since it has open-source/free alternatives
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Icecast, gnump3d, NullSoft's own server
\end_layout

\end_inset

.
 But, AppName combines the features of streaming and of a standard server
 such as gnump3d.
 In general streaming servers, the data is supposed to be provided by 
\emph on
sources
\emph default
, external servers or other clients which provide actual music.
 In such a case if you want to create a simple personal server, not only
 is setting up the server required, but then you have to configure an external
 client
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
example: ices, 
\begin_inset CommandInset href
LatexCommand href
target "http://www.icecast.org/ices.php"

\end_inset


\end_layout

\end_inset

, to which you feed the music.
\end_layout

\begin_layout Standard
AppName aims to provide a one or two step setup in which the user should
 simply compile the program and tell it the place where his music is stored
 and start it up.
 For now it runs only on POSIX operating systems, due to the support for
 I/O notifications required.
 This does decrease the market significantly, but considering the rapid
 rise of Linux, especially in home servers ( which are perfect for AppName
 deployment since that is their entire purpose ) I don't think that should
 be a problem.
\end_layout

\begin_layout Standard
Commercially it would be quite possible to modify AppName such that a subscripti
on based model is used.
 Users could be charged a small amount per month to stream the music.
 Playlists could expire after one-time play for free, save them for up to
 a week in the 
\emph on
Medium
\emph default
 plan and indefinitely in the 
\emph on
Premium
\emph default
 plan or something.
 The artists you are allowed to browse or listen too could also be restricted
 by plans.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/player-shoutcast-proto.png

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Request-response architecture
\begin_inset CommandInset label
LatexCommand label
name "fig:Request-response-architecture"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/playlist.png

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Playlist
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
